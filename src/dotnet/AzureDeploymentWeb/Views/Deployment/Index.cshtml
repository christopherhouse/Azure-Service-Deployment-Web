@model AzureDeploymentWeb.Models.DeploymentViewModel
@{
    ViewData["Title"] = "Deploy ARM Template";
}

<div class="deployment-tool-header">
    <h1 class="display-4">üöÄ Azure ARM Template Deployment Tool</h1>
    <p class="lead">Deploy Azure resources using ARM templates</p>
</div>

<div class="row">
    <div class="col-md-8 mx-auto">
        <div class="file-upload-section">
            <h3>üìÅ Upload ARM Template Files</h3>
            
            <form asp-action="Deploy" method="post" enctype="multipart/form-data" id="deploymentForm">
                @Html.AntiForgeryToken()
                
                <div class="mb-3">
                    <label asp-for="SelectedSubscriptionId" class="form-label">üîë Select Subscription</label>
                    <div class="position-relative">
                        <select asp-for="SelectedSubscriptionId" class="form-select" id="subscriptionSelect" required>
                            <option value="">Select a subscription...</option>
                        </select>
                        <div id="subscriptionLoadingIndicator" class="subscription-loading-overlay" style="display: none;">
                            <div class="d-flex align-items-center">
                                <span class="spinner me-2"></span>
                                <span>Loading subscriptions...</span>
                            </div>
                        </div>
                    </div>
                    <span asp-validation-for="SelectedSubscriptionId" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="SelectedResourceGroupName" class="form-label">üìÅ Select Resource Group</label>
                    <div class="position-relative">
                        <select asp-for="SelectedResourceGroupName" class="form-select" id="resourceGroupSelect" required disabled>
                            <option value="">Please select a subscription first</option>
                        </select>
                        <div id="resourceGroupLoadingIndicator" class="resource-group-loading-overlay" style="display: none;">
                            <div class="d-flex align-items-center">
                                <span class="spinner me-2"></span>
                                <span>Loading resource groups...</span>
                            </div>
                        </div>
                    </div>
                    <span asp-validation-for="SelectedResourceGroupName" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="TemplateFile" class="form-label">üìÑ ARM Template (.json)</label>
                    <input asp-for="TemplateFile" type="file" class="form-control" accept=".json" required />
                    <span asp-validation-for="TemplateFile" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="ParametersFile" class="form-label">‚öôÔ∏è Parameters File (.json)</label>
                    <input asp-for="ParametersFile" type="file" class="form-control" accept=".json" required />
                    <span asp-validation-for="ParametersFile" class="text-danger"></span>
                </div>

                @if (!string.IsNullOrEmpty(Model.SelectedSubscriptionId) && !string.IsNullOrEmpty(Model.SelectedResourceGroupName))
                {
                    <div class="deployment-info mb-3">
                        <p><strong>Target Subscription:</strong> @Model.SelectedSubscriptionId</p>
                        <p><strong>Target Resource Group:</strong> @Model.SelectedResourceGroupName</p>
                    </div>
                }

                <button type="submit" class="btn btn-primary btn-lg" id="deployButton" disabled>
                    üöÄ Deploy to Azure
                </button>
            </form>
        </div>

        @if (!string.IsNullOrEmpty(Model.DeploymentStatus) && Model.DeploymentStatus == "queued")
        {
            <div class="alert alert-warning mt-4" id="deploymentConfirmation">
                <h4>üöÄ Deployment Queued!</h4>
                <p>Your deployment has been queued and will start shortly.</p>
                <p><strong>Resource Group:</strong> @Model.ResourceGroup</p>
                <p><strong>Deployment Name:</strong> @Model.DeploymentName</p>
                @if (!string.IsNullOrEmpty(Model.DeploymentMessage))
                {
                    <p>@Model.DeploymentMessage</p>
                }
            </div>
        }

        @if (!string.IsNullOrEmpty(Model.DeploymentStatus))
        {
            <div class="status-@Model.DeploymentStatus" id="deploymentStatus">
                @if (Model.DeploymentStatus == "success")
                {
                    <h4>üéâ Deployment Successful! ‚ú®</h4>
                    <p>üéä Your Azure resources have been deployed successfully! üéä</p>
                    <p><strong>Resource Group:</strong> @Model.ResourceGroup</p>
                    <p><strong>Deployment:</strong> @Model.DeploymentName</p>
                    @if (!string.IsNullOrEmpty(Model.DeploymentMessage))
                    {
                        <p>@Model.DeploymentMessage</p>
                    }
                }
                else if (Model.DeploymentStatus == "started")
                {
                    <h4>üöÄ Deployment Started! ‚ö°</h4>
                    <p>‚ú® Your deployment has been started successfully! ‚ú®</p>
                    <p><strong>Resource Group:</strong> @Model.ResourceGroup</p>
                    <p><strong>Deployment:</strong> @Model.DeploymentName</p>
                    <p>üì¢ You'll receive real-time notifications about the deployment progress in the notification bell above.</p>
                    @if (!string.IsNullOrEmpty(Model.DeploymentMessage))
                    {
                        <p>@Model.DeploymentMessage</p>
                    }
                }
                else if (Model.DeploymentStatus == "error")
                {
                    <h4>üõë Deployment Failed</h4>
                    <p>‚ùå There was an error deploying your resources.</p>
                    <p><strong>Resource Group:</strong> @Model.ResourceGroup</p>
                    @if (!string.IsNullOrEmpty(Model.DeploymentName))
                    {
                        <p><strong>Deployment:</strong> @Model.DeploymentName</p>
                    }
                    @if (!string.IsNullOrEmpty(Model.DeploymentMessage))
                    {
                        <div class="mt-2">
                            <strong>Error Details:</strong>
                            <pre class="mt-1">@Model.DeploymentMessage</pre>
                        </div>
                    }
                }
                else if (Model.DeploymentStatus == "running")
                {
                    <div class="d-flex align-items-center">
                        <div class="spinner me-3"></div>
                        <div>
                            <h4>üöÄ Deployment in Progress</h4>
                            <p>Deploying to resource group: <strong>@Model.ResourceGroup</strong></p>
                            <p>Deployment name: <strong>@Model.DeploymentName</strong></p>
                            <p>Please wait while we deploy your resources...</p>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        $(document).ready(function() {
            // Load subscriptions on page load
            loadSubscriptions();
            
            // Handle subscription change
            $('#subscriptionSelect').on('change', function() {
                const subscriptionId = $(this).val();
                if (subscriptionId) {
                    loadResourceGroups(subscriptionId);
                } else {
                    clearResourceGroups();
                }
                updateDeployButtonState();
            });
            
            // Handle resource group change
            $('#resourceGroupSelect').on('change', function() {
                updateDeployButtonState();
            });
            
            // Handle file selection
            $('#deploymentForm input[type="file"]').on('change', function() {
                updateDeployButtonState();
            });
            
            $('#deploymentForm').on('submit', function() {
                $('#deployButton').prop('disabled', true).html('<span class="spinner me-2"></span>‚è≥ Deploying...');
            });
            
            // Initial state check
            updateDeployButtonState();
        });
        
        function loadSubscriptions() {
            const select = $('#subscriptionSelect');
            const loadingIndicator = $('#subscriptionLoadingIndicator');
            
            // Show loading state
            loadingIndicator.show();
            select.prop('disabled', true);
            
            fetch('/api/AzureResources/subscriptions')
                .then(response => response.json())
                .then(data => {
                    select.empty().append('<option value="">Select a subscription...</option>');
                    
                    if (data && data.length > 0) {
                        data.forEach(subscription => {
                            select.append(`<option value="${subscription.subscriptionId}">${subscription.displayName} (${subscription.subscriptionId})</option>`);
                        });
                    } else {
                        select.append('<option value="">No subscriptions available</option>');
                    }
                })
                .catch(error => {
                    console.error('Error loading subscriptions:', error);
                    select.empty().append('<option value="">Error loading subscriptions</option>');
                })
                .finally(() => {
                    loadingIndicator.hide();
                    select.prop('disabled', false);
                });
        }
        
        function loadResourceGroups(subscriptionId) {
            const resourceGroupSelect = $('#resourceGroupSelect');
            const loadingIndicator = $('#resourceGroupLoadingIndicator');
            
            // Show loading overlay and disable dropdown
            loadingIndicator.show();
            resourceGroupSelect.prop('disabled', true).empty().append('<option value="">Loading resource groups...</option>');
            
            fetch(`/api/AzureResources/resourcegroups/${subscriptionId}`)
                .then(response => response.json())
                .then(data => {
                    resourceGroupSelect.empty().append('<option value="">Select a resource group...</option>');
                    
                    if (data && data.length > 0) {
                        data.forEach(resourceGroup => {
                            resourceGroupSelect.append(`<option value="${resourceGroup.name}">${resourceGroup.name} (${resourceGroup.location})</option>`);
                        });
                        resourceGroupSelect.prop('disabled', false);
                    } else {
                        resourceGroupSelect.append('<option value="">No resource groups available</option>');
                    }
                })
                .catch(error => {
                    console.error('Error loading resource groups:', error);
                    resourceGroupSelect.empty().append('<option value="">Error loading resource groups</option>');
                })
                .finally(() => {
                    // Hide loading overlay
                    loadingIndicator.hide();
                });
        }
        
        function clearResourceGroups() {
            $('#resourceGroupSelect')
                .prop('disabled', true)
                .empty()
                .append('<option value="">Please select a subscription first</option>');
        }
        
        function updateDeployButtonState() {
            const subscriptionSelected = $('#subscriptionSelect').val();
            const resourceGroupSelected = $('#resourceGroupSelect').val();
            const templateFileSelected = $('#deploymentForm input[name="TemplateFile"]')[0].files.length > 0;
            const parametersFileSelected = $('#deploymentForm input[name="ParametersFile"]')[0].files.length > 0;
            
            const allRequired = subscriptionSelected && resourceGroupSelected && templateFileSelected && parametersFileSelected;
            $('#deployButton').prop('disabled', !allRequired);
        }
    </script>
}