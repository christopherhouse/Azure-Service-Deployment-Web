{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nexport const apiVersionPolicyName = \"ApiVersionPolicy\";\n/**\n * Creates a policy that sets the apiVersion as a query parameter on every request\n * @param options - Client options\n * @returns Pipeline policy that sets the apiVersion as a query parameter on every request\n */\nexport function apiVersionPolicy(options) {\n  return {\n    name: apiVersionPolicyName,\n    sendRequest: (req, next) => {\n      // Use the apiVesion defined in request url directly\n      // Append one if there is no apiVesion and we have one at client options\n      const url = new URL(req.url);\n      if (!url.searchParams.get(\"api-version\") && options.apiVersion) {\n        req.url = \"\".concat(req.url).concat(Array.from(url.searchParams.keys()).length > 0 ? \"&\" : \"?\", \"api-version=\").concat(options.apiVersion);\n      }\n      return next(req);\n    }\n  };\n}","map":{"version":3,"names":["apiVersionPolicyName","apiVersionPolicy","options","name","sendRequest","req","next","url","URL","searchParams","get","apiVersion","concat","Array","from","keys","length"],"sources":["/home/runner/work/Azure-Service-Deployment-Web/Azure-Service-Deployment-Web/node_modules/@typespec/ts-http-runtime/src/client/apiVersionPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { PipelinePolicy } from \"../pipeline.js\";\nimport type { ClientOptions } from \"./common.js\";\n\nexport const apiVersionPolicyName = \"ApiVersionPolicy\";\n\n/**\n * Creates a policy that sets the apiVersion as a query parameter on every request\n * @param options - Client options\n * @returns Pipeline policy that sets the apiVersion as a query parameter on every request\n */\nexport function apiVersionPolicy(options: ClientOptions): PipelinePolicy {\n  return {\n    name: apiVersionPolicyName,\n    sendRequest: (req, next) => {\n      // Use the apiVesion defined in request url directly\n      // Append one if there is no apiVesion and we have one at client options\n      const url = new URL(req.url);\n      if (!url.searchParams.get(\"api-version\") && options.apiVersion) {\n        req.url = `${req.url}${\n          Array.from(url.searchParams.keys()).length > 0 ? \"&\" : \"?\"\n        }api-version=${options.apiVersion}`;\n      }\n\n      return next(req);\n    },\n  };\n}\n"],"mappings":"AAAA;AACA;AAKA,OAAO,MAAMA,oBAAoB,GAAG,kBAAkB;AAEtD;;;;;AAKA,OAAM,SAAUC,gBAAgBA,CAACC,OAAsB;EACrD,OAAO;IACLC,IAAI,EAAEH,oBAAoB;IAC1BI,WAAW,EAAEA,CAACC,GAAG,EAAEC,IAAI,KAAI;MACzB;MACA;MACA,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAACH,GAAG,CAACE,GAAG,CAAC;MAC5B,IAAI,CAACA,GAAG,CAACE,YAAY,CAACC,GAAG,CAAC,aAAa,CAAC,IAAIR,OAAO,CAACS,UAAU,EAAE;QAC9DN,GAAG,CAACE,GAAG,MAAAK,MAAA,CAAMP,GAAG,CAACE,GAAG,EAAAK,MAAA,CAClBC,KAAK,CAACC,IAAI,CAACP,GAAG,CAACE,YAAY,CAACM,IAAI,EAAE,CAAC,CAACC,MAAM,GAAG,CAAC,GAAG,GAAG,GAAG,GACzD,kBAAAJ,MAAA,CAAeV,OAAO,CAACS,UAAU,CAAE;MACrC;MAEA,OAAOL,IAAI,CAACD,GAAG,CAAC;IAClB;GACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}