{"ast":null,"code":"import{ResourceManagementClient}from\"@azure/arm-resources\";export class AzureDeploymentService{constructor(credential){this.client=void 0;this.subscriptionId=void 0;this.resourceGroupName=void 0;this.subscriptionId=process.env.REACT_APP_AZURE_SUBSCRIPTION_ID;this.resourceGroupName=process.env.REACT_APP_AZURE_RESOURCE_GROUP;if(!this.subscriptionId||!this.resourceGroupName){throw new Error(\"Missing required environment variables: REACT_APP_AZURE_SUBSCRIPTION_ID or REACT_APP_AZURE_RESOURCE_GROUP\");}this.client=new ResourceManagementClient(credential,this.subscriptionId);}/**\n   * Extracts actual parameter values from ARM parameter file structure.\n   * Handles both full ARM parameter files (with $schema, contentVersion, parameters)\n   * and direct parameter objects.\n   */extractParameters(parameters){// If the parameters object has a 'parameters' property, it's a full ARM parameter file\nif(parameters&&typeof parameters==='object'&&parameters.parameters){return parameters.parameters;}// Otherwise, assume it's already in the correct format\nreturn parameters;}async deployTemplate(params){try{var _deployment$propertie;// Extract actual parameters from ARM parameter file structure if needed\nconst actualParameters=this.extractParameters(params.parameters);const deploymentParameters={properties:{template:params.template,parameters:actualParameters,mode:\"Incremental\"}};console.log(\"Starting deployment: \".concat(params.deploymentName));const deployment=await this.client.deployments.beginCreateOrUpdateAndWait(this.resourceGroupName,params.deploymentName,deploymentParameters);return{success:true,deploymentName:params.deploymentName,resourceGroupName:this.resourceGroupName,outputs:(_deployment$propertie=deployment.properties)===null||_deployment$propertie===void 0?void 0:_deployment$propertie.outputs};}catch(error){console.error(\"Deployment failed:\",error);return{success:false,deploymentName:params.deploymentName,resourceGroupName:this.resourceGroupName,error:error instanceof Error?error.message:\"Unknown deployment error\"};}}async getDeploymentStatus(deploymentName){try{var _deployment$propertie2;const deployment=await this.client.deployments.get(this.resourceGroupName,deploymentName);return(_deployment$propertie2=deployment.properties)===null||_deployment$propertie2===void 0?void 0:_deployment$propertie2.provisioningState;}catch(error){console.error(\"Failed to get deployment status:\",error);return\"Failed\";}}}","map":{"version":3,"names":["ResourceManagementClient","AzureDeploymentService","constructor","credential","client","subscriptionId","resourceGroupName","process","env","REACT_APP_AZURE_SUBSCRIPTION_ID","REACT_APP_AZURE_RESOURCE_GROUP","Error","extractParameters","parameters","deployTemplate","params","_deployment$propertie","actualParameters","deploymentParameters","properties","template","mode","console","log","concat","deploymentName","deployment","deployments","beginCreateOrUpdateAndWait","success","outputs","error","message","getDeploymentStatus","_deployment$propertie2","get","provisioningState"],"sources":["/home/runner/work/Azure-Service-Deployment-Web/Azure-Service-Deployment-Web/src/react/src/services/azureDeploymentService.ts"],"sourcesContent":["import { ResourceManagementClient, Deployment } from \"@azure/arm-resources\";\nimport { TokenCredential } from \"@azure/core-auth\";\n\nexport interface DeploymentParams {\n  template: any;\n  parameters: any;\n  deploymentName: string;\n}\n\nexport interface DeploymentResult {\n  success: boolean;\n  deploymentName: string;\n  resourceGroupName: string;\n  outputs?: any;\n  error?: string;\n}\n\nexport class AzureDeploymentService {\n  private client: ResourceManagementClient;\n  private subscriptionId: string;\n  private resourceGroupName: string;\n\n  constructor(credential: TokenCredential) {\n    this.subscriptionId = process.env.REACT_APP_AZURE_SUBSCRIPTION_ID!;\n    this.resourceGroupName = process.env.REACT_APP_AZURE_RESOURCE_GROUP!;\n    \n    if (!this.subscriptionId || !this.resourceGroupName) {\n      throw new Error(\"Missing required environment variables: REACT_APP_AZURE_SUBSCRIPTION_ID or REACT_APP_AZURE_RESOURCE_GROUP\");\n    }\n\n    this.client = new ResourceManagementClient(credential, this.subscriptionId);\n  }\n\n  /**\n   * Extracts actual parameter values from ARM parameter file structure.\n   * Handles both full ARM parameter files (with $schema, contentVersion, parameters)\n   * and direct parameter objects.\n   */\n  private extractParameters(parameters: any): any {\n    // If the parameters object has a 'parameters' property, it's a full ARM parameter file\n    if (parameters && typeof parameters === 'object' && parameters.parameters) {\n      return parameters.parameters;\n    }\n    \n    // Otherwise, assume it's already in the correct format\n    return parameters;\n  }\n\n  async deployTemplate(params: DeploymentParams): Promise<DeploymentResult> {\n    try {\n      // Extract actual parameters from ARM parameter file structure if needed\n      const actualParameters = this.extractParameters(params.parameters);\n      \n      const deploymentParameters: Deployment = {\n        properties: {\n          template: params.template,\n          parameters: actualParameters,\n          mode: \"Incremental\",\n        },\n      };\n\n      console.log(`Starting deployment: ${params.deploymentName}`);\n      \n      const deployment = await this.client.deployments.beginCreateOrUpdateAndWait(\n        this.resourceGroupName,\n        params.deploymentName,\n        deploymentParameters\n      );\n\n      return {\n        success: true,\n        deploymentName: params.deploymentName,\n        resourceGroupName: this.resourceGroupName,\n        outputs: deployment.properties?.outputs,\n      };\n    } catch (error) {\n      console.error(\"Deployment failed:\", error);\n      return {\n        success: false,\n        deploymentName: params.deploymentName,\n        resourceGroupName: this.resourceGroupName,\n        error: error instanceof Error ? error.message : \"Unknown deployment error\",\n      };\n    }\n  }\n\n  async getDeploymentStatus(deploymentName: string) {\n    try {\n      const deployment = await this.client.deployments.get(\n        this.resourceGroupName,\n        deploymentName\n      );\n      return deployment.properties?.provisioningState;\n    } catch (error) {\n      console.error(\"Failed to get deployment status:\", error);\n      return \"Failed\";\n    }\n  }\n}"],"mappings":"AAAA,OAASA,wBAAwB,KAAoB,sBAAsB,CAiB3E,MAAO,MAAM,CAAAC,sBAAuB,CAKlCC,WAAWA,CAACC,UAA2B,CAAE,MAJjCC,MAAM,aACNC,cAAc,aACdC,iBAAiB,QAGvB,IAAI,CAACD,cAAc,CAAGE,OAAO,CAACC,GAAG,CAACC,+BAAgC,CAClE,IAAI,CAACH,iBAAiB,CAAGC,OAAO,CAACC,GAAG,CAACE,8BAA+B,CAEpE,GAAI,CAAC,IAAI,CAACL,cAAc,EAAI,CAAC,IAAI,CAACC,iBAAiB,CAAE,CACnD,KAAM,IAAI,CAAAK,KAAK,CAAC,2GAA2G,CAAC,CAC9H,CAEA,IAAI,CAACP,MAAM,CAAG,GAAI,CAAAJ,wBAAwB,CAACG,UAAU,CAAE,IAAI,CAACE,cAAc,CAAC,CAC7E,CAEA;AACF;AACA;AACA;AACA,KACUO,iBAAiBA,CAACC,UAAe,CAAO,CAC9C;AACA,GAAIA,UAAU,EAAI,MAAO,CAAAA,UAAU,GAAK,QAAQ,EAAIA,UAAU,CAACA,UAAU,CAAE,CACzE,MAAO,CAAAA,UAAU,CAACA,UAAU,CAC9B,CAEA;AACA,MAAO,CAAAA,UAAU,CACnB,CAEA,KAAM,CAAAC,cAAcA,CAACC,MAAwB,CAA6B,CACxE,GAAI,KAAAC,qBAAA,CACF;AACA,KAAM,CAAAC,gBAAgB,CAAG,IAAI,CAACL,iBAAiB,CAACG,MAAM,CAACF,UAAU,CAAC,CAElE,KAAM,CAAAK,oBAAgC,CAAG,CACvCC,UAAU,CAAE,CACVC,QAAQ,CAAEL,MAAM,CAACK,QAAQ,CACzBP,UAAU,CAAEI,gBAAgB,CAC5BI,IAAI,CAAE,aACR,CACF,CAAC,CAEDC,OAAO,CAACC,GAAG,yBAAAC,MAAA,CAAyBT,MAAM,CAACU,cAAc,CAAE,CAAC,CAE5D,KAAM,CAAAC,UAAU,CAAG,KAAM,KAAI,CAACtB,MAAM,CAACuB,WAAW,CAACC,0BAA0B,CACzE,IAAI,CAACtB,iBAAiB,CACtBS,MAAM,CAACU,cAAc,CACrBP,oBACF,CAAC,CAED,MAAO,CACLW,OAAO,CAAE,IAAI,CACbJ,cAAc,CAAEV,MAAM,CAACU,cAAc,CACrCnB,iBAAiB,CAAE,IAAI,CAACA,iBAAiB,CACzCwB,OAAO,EAAAd,qBAAA,CAAEU,UAAU,CAACP,UAAU,UAAAH,qBAAA,iBAArBA,qBAAA,CAAuBc,OAClC,CAAC,CACH,CAAE,MAAOC,KAAK,CAAE,CACdT,OAAO,CAACS,KAAK,CAAC,oBAAoB,CAAEA,KAAK,CAAC,CAC1C,MAAO,CACLF,OAAO,CAAE,KAAK,CACdJ,cAAc,CAAEV,MAAM,CAACU,cAAc,CACrCnB,iBAAiB,CAAE,IAAI,CAACA,iBAAiB,CACzCyB,KAAK,CAAEA,KAAK,WAAY,CAAApB,KAAK,CAAGoB,KAAK,CAACC,OAAO,CAAG,0BAClD,CAAC,CACH,CACF,CAEA,KAAM,CAAAC,mBAAmBA,CAACR,cAAsB,CAAE,CAChD,GAAI,KAAAS,sBAAA,CACF,KAAM,CAAAR,UAAU,CAAG,KAAM,KAAI,CAACtB,MAAM,CAACuB,WAAW,CAACQ,GAAG,CAClD,IAAI,CAAC7B,iBAAiB,CACtBmB,cACF,CAAC,CACD,OAAAS,sBAAA,CAAOR,UAAU,CAACP,UAAU,UAAAe,sBAAA,iBAArBA,sBAAA,CAAuBE,iBAAiB,CACjD,CAAE,MAAOL,KAAK,CAAE,CACdT,OAAO,CAACS,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAC,CACxD,MAAO,QAAQ,CACjB,CACF,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}