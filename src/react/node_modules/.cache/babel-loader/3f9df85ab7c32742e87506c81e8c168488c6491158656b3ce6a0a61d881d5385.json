{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from \"tslib\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing Providers operations. */\nexport class ProvidersImpl {\n  /**\n   * Initialize a new instance of the class Providers class.\n   * @param client Reference to the service client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Gets all resource providers for a subscription.\n   * @param options The options parameters.\n   */\n  list(options) {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: settings => {\n        if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      }\n    };\n  }\n  listPagingPage(options, settings) {\n    return __asyncGenerator(this, arguments, function* listPagingPage_1() {\n      let result;\n      let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;\n      if (!continuationToken) {\n        result = yield __await(this._list(options));\n        let page = result.value || [];\n        continuationToken = result.nextLink;\n        setContinuationToken(page, continuationToken);\n        yield yield __await(page);\n      }\n      while (continuationToken) {\n        result = yield __await(this._listNext(continuationToken, options));\n        continuationToken = result.nextLink;\n        let page = result.value || [];\n        setContinuationToken(page, continuationToken);\n        yield yield __await(page);\n      }\n    });\n  }\n  listPagingAll(options) {\n    return __asyncGenerator(this, arguments, function* listPagingAll_1() {\n      var _a, e_1, _b, _c;\n      try {\n        for (var _d = true, _e = __asyncValues(this.listPagingPage(options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {\n          _c = _f.value;\n          _d = false;\n          const page = _c;\n          yield __await(yield* __asyncDelegator(__asyncValues(page)));\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    });\n  }\n  /**\n   * Gets all resource providers for the tenant.\n   * @param options The options parameters.\n   */\n  listAtTenantScope(options) {\n    const iter = this.listAtTenantScopePagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: settings => {\n        if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listAtTenantScopePagingPage(options, settings);\n      }\n    };\n  }\n  listAtTenantScopePagingPage(options, settings) {\n    return __asyncGenerator(this, arguments, function* listAtTenantScopePagingPage_1() {\n      let result;\n      let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;\n      if (!continuationToken) {\n        result = yield __await(this._listAtTenantScope(options));\n        let page = result.value || [];\n        continuationToken = result.nextLink;\n        setContinuationToken(page, continuationToken);\n        yield yield __await(page);\n      }\n      while (continuationToken) {\n        result = yield __await(this._listAtTenantScopeNext(continuationToken, options));\n        continuationToken = result.nextLink;\n        let page = result.value || [];\n        setContinuationToken(page, continuationToken);\n        yield yield __await(page);\n      }\n    });\n  }\n  listAtTenantScopePagingAll(options) {\n    return __asyncGenerator(this, arguments, function* listAtTenantScopePagingAll_1() {\n      var _a, e_2, _b, _c;\n      try {\n        for (var _d = true, _e = __asyncValues(this.listAtTenantScopePagingPage(options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {\n          _c = _f.value;\n          _d = false;\n          const page = _c;\n          yield __await(yield* __asyncDelegator(__asyncValues(page)));\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    });\n  }\n  /**\n   * Unregisters a subscription from a resource provider.\n   * @param resourceProviderNamespace The namespace of the resource provider to unregister.\n   * @param options The options parameters.\n   */\n  unregister(resourceProviderNamespace, options) {\n    return this.client.sendOperationRequest({\n      resourceProviderNamespace,\n      options\n    }, unregisterOperationSpec);\n  }\n  /**\n   * Registers a management group with a resource provider. Use this operation to register a resource\n   * provider with resource types that can be deployed at the management group scope. It does not\n   * recursively register subscriptions within the management group. Instead, you must register\n   * subscriptions individually.\n   * @param resourceProviderNamespace The namespace of the resource provider to register.\n   * @param groupId The management group ID.\n   * @param options The options parameters.\n   */\n  registerAtManagementGroupScope(resourceProviderNamespace, groupId, options) {\n    return this.client.sendOperationRequest({\n      resourceProviderNamespace,\n      groupId,\n      options\n    }, registerAtManagementGroupScopeOperationSpec);\n  }\n  /**\n   * Get the provider permissions.\n   * @param resourceProviderNamespace The namespace of the resource provider.\n   * @param options The options parameters.\n   */\n  providerPermissions(resourceProviderNamespace, options) {\n    return this.client.sendOperationRequest({\n      resourceProviderNamespace,\n      options\n    }, providerPermissionsOperationSpec);\n  }\n  /**\n   * Registers a subscription with a resource provider.\n   * @param resourceProviderNamespace The namespace of the resource provider to register.\n   * @param options The options parameters.\n   */\n  register(resourceProviderNamespace, options) {\n    return this.client.sendOperationRequest({\n      resourceProviderNamespace,\n      options\n    }, registerOperationSpec);\n  }\n  /**\n   * Gets all resource providers for a subscription.\n   * @param options The options parameters.\n   */\n  _list(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, listOperationSpec);\n  }\n  /**\n   * Gets all resource providers for the tenant.\n   * @param options The options parameters.\n   */\n  _listAtTenantScope(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, listAtTenantScopeOperationSpec);\n  }\n  /**\n   * Gets the specified resource provider.\n   * @param resourceProviderNamespace The namespace of the resource provider.\n   * @param options The options parameters.\n   */\n  get(resourceProviderNamespace, options) {\n    return this.client.sendOperationRequest({\n      resourceProviderNamespace,\n      options\n    }, getOperationSpec);\n  }\n  /**\n   * Gets the specified resource provider at the tenant level.\n   * @param resourceProviderNamespace The namespace of the resource provider.\n   * @param options The options parameters.\n   */\n  getAtTenantScope(resourceProviderNamespace, options) {\n    return this.client.sendOperationRequest({\n      resourceProviderNamespace,\n      options\n    }, getAtTenantScopeOperationSpec);\n  }\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  _listNext(nextLink, options) {\n    return this.client.sendOperationRequest({\n      nextLink,\n      options\n    }, listNextOperationSpec);\n  }\n  /**\n   * ListAtTenantScopeNext\n   * @param nextLink The nextLink from the previous successful call to the ListAtTenantScope method.\n   * @param options The options parameters.\n   */\n  _listAtTenantScopeNext(nextLink, options) {\n    return this.client.sendOperationRequest({\n      nextLink,\n      options\n    }, listAtTenantScopeNextOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */false);\nconst unregisterOperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/unregister\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Provider\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.resourceProviderNamespace],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst registerAtManagementGroupScopeOperationSpec = {\n  path: \"/providers/Microsoft.Management/managementGroups/{groupId}/providers/{resourceProviderNamespace}/register\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.groupId, Parameters.resourceProviderNamespace],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst providerPermissionsOperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/providerPermissions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ProviderPermissionListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.resourceProviderNamespace],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst registerOperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/register\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Provider\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.properties,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.resourceProviderNamespace],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst listOperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ProviderListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.expand],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listAtTenantScopeOperationSpec = {\n  path: \"/providers\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ProviderListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.expand],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Provider\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.expand],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.resourceProviderNamespace],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAtTenantScopeOperationSpec = {\n  path: \"/providers/{resourceProviderNamespace}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Provider\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.expand],\n  urlParameters: [Parameters.$host, Parameters.resourceProviderNamespace],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listNextOperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ProviderListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listAtTenantScopeNextOperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ProviderListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  urlParameters: [Parameters.$host, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};","map":{"version":3,"names":["setContinuationToken","coreClient","Mappers","Parameters","ProvidersImpl","constructor","client","list","options","iter","listPagingAll","next","Symbol","asyncIterator","byPage","settings","maxPageSize","Error","listPagingPage","result","continuationToken","__await","_list","page","value","nextLink","_listNext","_d","_e","__asyncValues","_f","_a","done","_c","__asyncDelegator","listAtTenantScope","listAtTenantScopePagingAll","listAtTenantScopePagingPage","_listAtTenantScope","_listAtTenantScopeNext","unregister","resourceProviderNamespace","sendOperationRequest","unregisterOperationSpec","registerAtManagementGroupScope","groupId","registerAtManagementGroupScopeOperationSpec","providerPermissions","providerPermissionsOperationSpec","register","registerOperationSpec","listOperationSpec","listAtTenantScopeOperationSpec","get","getOperationSpec","getAtTenantScope","getAtTenantScopeOperationSpec","listNextOperationSpec","listAtTenantScopeNextOperationSpec","serializer","createSerializer","path","httpMethod","responses","bodyMapper","Provider","default","CloudError","queryParameters","apiVersion","urlParameters","$host","subscriptionId","headerParameters","accept","ProviderPermissionListResult","requestBody","properties","contentType","mediaType","ProviderListResult","expand"],"sources":["/home/runner/work/Azure-Service-Deployment-Web/Azure-Service-Deployment-Web/node_modules/@azure/arm-resources/src/operations/providers.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport { Providers } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { ResourceManagementClient } from \"../resourceManagementClient.js\";\nimport {\n  Provider,\n  ProvidersListNextOptionalParams,\n  ProvidersListOptionalParams,\n  ProvidersListResponse,\n  ProvidersListAtTenantScopeNextOptionalParams,\n  ProvidersListAtTenantScopeOptionalParams,\n  ProvidersListAtTenantScopeResponse,\n  ProvidersUnregisterOptionalParams,\n  ProvidersUnregisterResponse,\n  ProvidersRegisterAtManagementGroupScopeOptionalParams,\n  ProvidersProviderPermissionsOptionalParams,\n  ProvidersProviderPermissionsResponse,\n  ProvidersRegisterOptionalParams,\n  ProvidersRegisterResponse,\n  ProvidersGetOptionalParams,\n  ProvidersGetResponse,\n  ProvidersGetAtTenantScopeOptionalParams,\n  ProvidersGetAtTenantScopeResponse,\n  ProvidersListNextResponse,\n  ProvidersListAtTenantScopeNextResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing Providers operations. */\nexport class ProvidersImpl implements Providers {\n  private readonly client: ResourceManagementClient;\n\n  /**\n   * Initialize a new instance of the class Providers class.\n   * @param client Reference to the service client\n   */\n  constructor(client: ResourceManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Gets all resource providers for a subscription.\n   * @param options The options parameters.\n   */\n  public list(\n    options?: ProvidersListOptionalParams,\n  ): PagedAsyncIterableIterator<Provider> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      },\n    };\n  }\n\n  private async *listPagingPage(\n    options?: ProvidersListOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<Provider[]> {\n    let result: ProvidersListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    options?: ProvidersListOptionalParams,\n  ): AsyncIterableIterator<Provider> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets all resource providers for the tenant.\n   * @param options The options parameters.\n   */\n  public listAtTenantScope(\n    options?: ProvidersListAtTenantScopeOptionalParams,\n  ): PagedAsyncIterableIterator<Provider> {\n    const iter = this.listAtTenantScopePagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listAtTenantScopePagingPage(options, settings);\n      },\n    };\n  }\n\n  private async *listAtTenantScopePagingPage(\n    options?: ProvidersListAtTenantScopeOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<Provider[]> {\n    let result: ProvidersListAtTenantScopeResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listAtTenantScope(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listAtTenantScopeNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listAtTenantScopePagingAll(\n    options?: ProvidersListAtTenantScopeOptionalParams,\n  ): AsyncIterableIterator<Provider> {\n    for await (const page of this.listAtTenantScopePagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Unregisters a subscription from a resource provider.\n   * @param resourceProviderNamespace The namespace of the resource provider to unregister.\n   * @param options The options parameters.\n   */\n  unregister(\n    resourceProviderNamespace: string,\n    options?: ProvidersUnregisterOptionalParams,\n  ): Promise<ProvidersUnregisterResponse> {\n    return this.client.sendOperationRequest(\n      { resourceProviderNamespace, options },\n      unregisterOperationSpec,\n    );\n  }\n\n  /**\n   * Registers a management group with a resource provider. Use this operation to register a resource\n   * provider with resource types that can be deployed at the management group scope. It does not\n   * recursively register subscriptions within the management group. Instead, you must register\n   * subscriptions individually.\n   * @param resourceProviderNamespace The namespace of the resource provider to register.\n   * @param groupId The management group ID.\n   * @param options The options parameters.\n   */\n  registerAtManagementGroupScope(\n    resourceProviderNamespace: string,\n    groupId: string,\n    options?: ProvidersRegisterAtManagementGroupScopeOptionalParams,\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { resourceProviderNamespace, groupId, options },\n      registerAtManagementGroupScopeOperationSpec,\n    );\n  }\n\n  /**\n   * Get the provider permissions.\n   * @param resourceProviderNamespace The namespace of the resource provider.\n   * @param options The options parameters.\n   */\n  providerPermissions(\n    resourceProviderNamespace: string,\n    options?: ProvidersProviderPermissionsOptionalParams,\n  ): Promise<ProvidersProviderPermissionsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceProviderNamespace, options },\n      providerPermissionsOperationSpec,\n    );\n  }\n\n  /**\n   * Registers a subscription with a resource provider.\n   * @param resourceProviderNamespace The namespace of the resource provider to register.\n   * @param options The options parameters.\n   */\n  register(\n    resourceProviderNamespace: string,\n    options?: ProvidersRegisterOptionalParams,\n  ): Promise<ProvidersRegisterResponse> {\n    return this.client.sendOperationRequest(\n      { resourceProviderNamespace, options },\n      registerOperationSpec,\n    );\n  }\n\n  /**\n   * Gets all resource providers for a subscription.\n   * @param options The options parameters.\n   */\n  private _list(\n    options?: ProvidersListOptionalParams,\n  ): Promise<ProvidersListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * Gets all resource providers for the tenant.\n   * @param options The options parameters.\n   */\n  private _listAtTenantScope(\n    options?: ProvidersListAtTenantScopeOptionalParams,\n  ): Promise<ProvidersListAtTenantScopeResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      listAtTenantScopeOperationSpec,\n    );\n  }\n\n  /**\n   * Gets the specified resource provider.\n   * @param resourceProviderNamespace The namespace of the resource provider.\n   * @param options The options parameters.\n   */\n  get(\n    resourceProviderNamespace: string,\n    options?: ProvidersGetOptionalParams,\n  ): Promise<ProvidersGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceProviderNamespace, options },\n      getOperationSpec,\n    );\n  }\n\n  /**\n   * Gets the specified resource provider at the tenant level.\n   * @param resourceProviderNamespace The namespace of the resource provider.\n   * @param options The options parameters.\n   */\n  getAtTenantScope(\n    resourceProviderNamespace: string,\n    options?: ProvidersGetAtTenantScopeOptionalParams,\n  ): Promise<ProvidersGetAtTenantScopeResponse> {\n    return this.client.sendOperationRequest(\n      { resourceProviderNamespace, options },\n      getAtTenantScopeOperationSpec,\n    );\n  }\n\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    nextLink: string,\n    options?: ProvidersListNextOptionalParams,\n  ): Promise<ProvidersListNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listNextOperationSpec,\n    );\n  }\n\n  /**\n   * ListAtTenantScopeNext\n   * @param nextLink The nextLink from the previous successful call to the ListAtTenantScope method.\n   * @param options The options parameters.\n   */\n  private _listAtTenantScopeNext(\n    nextLink: string,\n    options?: ProvidersListAtTenantScopeNextOptionalParams,\n  ): Promise<ProvidersListAtTenantScopeNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listAtTenantScopeNextOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst unregisterOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/unregister\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Provider,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceProviderNamespace,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst registerAtManagementGroupScopeOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/Microsoft.Management/managementGroups/{groupId}/providers/{resourceProviderNamespace}/register\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.groupId,\n    Parameters.resourceProviderNamespace,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst providerPermissionsOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/providerPermissions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ProviderPermissionListResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceProviderNamespace,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst registerOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/register\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Provider,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.properties,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceProviderNamespace,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ProviderListResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.expand],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listAtTenantScopeOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ProviderListResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.expand],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Provider,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.expand],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceProviderNamespace,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAtTenantScopeOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/{resourceProviderNamespace}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Provider,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.expand],\n  urlParameters: [Parameters.$host, Parameters.resourceProviderNamespace],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ProviderListResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.nextLink,\n    Parameters.subscriptionId,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listAtTenantScopeNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ProviderListResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}