{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from \"tslib\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { createHttpPoller } from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl.js\";\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing TagsOperations operations. */\nexport class TagsOperationsImpl {\n  /**\n   * Initialize a new instance of the class TagsOperations class.\n   * @param client Reference to the service client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * This operation performs a union of predefined tags, resource tags, resource group tags and\n   * subscription tags, and returns a summary of usage for each tag name and value under the given\n   * subscription. In case of a large number of tags, this operation may return a previously cached\n   * result.\n   * @param options The options parameters.\n   */\n  list(options) {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: settings => {\n        if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      }\n    };\n  }\n  listPagingPage(options, settings) {\n    return __asyncGenerator(this, arguments, function* listPagingPage_1() {\n      let result;\n      let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;\n      if (!continuationToken) {\n        result = yield __await(this._list(options));\n        let page = result.value || [];\n        continuationToken = result.nextLink;\n        setContinuationToken(page, continuationToken);\n        yield yield __await(page);\n      }\n      while (continuationToken) {\n        result = yield __await(this._listNext(continuationToken, options));\n        continuationToken = result.nextLink;\n        let page = result.value || [];\n        setContinuationToken(page, continuationToken);\n        yield yield __await(page);\n      }\n    });\n  }\n  listPagingAll(options) {\n    return __asyncGenerator(this, arguments, function* listPagingAll_1() {\n      var _a, e_1, _b, _c;\n      try {\n        for (var _d = true, _e = __asyncValues(this.listPagingPage(options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {\n          _c = _f.value;\n          _d = false;\n          const page = _c;\n          yield __await(yield* __asyncDelegator(__asyncValues(page)));\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    });\n  }\n  /**\n   * This operation allows deleting a value from the list of predefined values for an existing predefined\n   * tag name. The value being deleted must not be in use as a tag value for the given tag name for any\n   * resource.\n   * @param tagName The name of the tag.\n   * @param tagValue The value of the tag to delete.\n   * @param options The options parameters.\n   */\n  deleteValue(tagName, tagValue, options) {\n    return this.client.sendOperationRequest({\n      tagName,\n      tagValue,\n      options\n    }, deleteValueOperationSpec);\n  }\n  /**\n   * This operation allows adding a value to the list of predefined values for an existing predefined tag\n   * name. A tag value can have a maximum of 256 characters.\n   * @param tagName The name of the tag.\n   * @param tagValue The value of the tag to create.\n   * @param options The options parameters.\n   */\n  createOrUpdateValue(tagName, tagValue, options) {\n    return this.client.sendOperationRequest({\n      tagName,\n      tagValue,\n      options\n    }, createOrUpdateValueOperationSpec);\n  }\n  /**\n   * This operation allows adding a name to the list of predefined tag names for the given subscription.\n   * A tag name can have a maximum of 512 characters and is case-insensitive. Tag names cannot have the\n   * following prefixes which are reserved for Azure use: 'microsoft', 'azure', 'windows'.\n   * @param tagName The name of the tag to create.\n   * @param options The options parameters.\n   */\n  createOrUpdate(tagName, options) {\n    return this.client.sendOperationRequest({\n      tagName,\n      options\n    }, createOrUpdateOperationSpec);\n  }\n  /**\n   * This operation allows deleting a name from the list of predefined tag names for the given\n   * subscription. The name being deleted must not be in use as a tag name for any resource. All\n   * predefined values for the given name must have already been deleted.\n   * @param tagName The name of the tag.\n   * @param options The options parameters.\n   */\n  delete(tagName, options) {\n    return this.client.sendOperationRequest({\n      tagName,\n      options\n    }, deleteOperationSpec);\n  }\n  /**\n   * This operation performs a union of predefined tags, resource tags, resource group tags and\n   * subscription tags, and returns a summary of usage for each tag name and value under the given\n   * subscription. In case of a large number of tags, this operation may return a previously cached\n   * result.\n   * @param options The options parameters.\n   */\n  _list(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, listOperationSpec);\n  }\n  /**\n   * This operation allows adding or replacing the entire set of tags on the specified resource or\n   * subscription. The specified entity can have a maximum of 50 tags.\n   * @param scope The resource scope.\n   * @param parameters Wrapper resource for tags API requests and responses.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateAtScope(scope, parameters, options) {\n    const directSendOperation = async (args, spec) => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (args, spec) => {\n      var _a;\n      let currentRawResponse = undefined;\n      const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;\n      const callback = (rawResponse, flatResponse) => {\n        currentRawResponse = rawResponse;\n        providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);\n      };\n      const updatedArgs = Object.assign(Object.assign({}, args), {\n        options: Object.assign(Object.assign({}, args.options), {\n          onResponse: callback\n        })\n      });\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse.status,\n          body: currentRawResponse.parsedBody,\n          headers: currentRawResponse.headers.toJSON()\n        }\n      };\n    };\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        scope,\n        parameters,\n        options\n      },\n      spec: createOrUpdateAtScopeOperationSpec\n    });\n    const poller = await createHttpPoller(lro, {\n      restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,\n      intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n  /**\n   * This operation allows adding or replacing the entire set of tags on the specified resource or\n   * subscription. The specified entity can have a maximum of 50 tags.\n   * @param scope The resource scope.\n   * @param parameters Wrapper resource for tags API requests and responses.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateAtScopeAndWait(scope, parameters, options) {\n    const poller = await this.beginCreateOrUpdateAtScope(scope, parameters, options);\n    return poller.pollUntilDone();\n  }\n  /**\n   * This operation allows replacing, merging or selectively deleting tags on the specified resource or\n   * subscription. The specified entity can have a maximum of 50 tags at the end of the operation. The\n   * 'replace' option replaces the entire set of existing tags with a new set. The 'merge' option allows\n   * adding tags with new names and updating the values of tags with existing names. The 'delete' option\n   * allows selectively deleting tags based on given names or name/value pairs.\n   * @param scope The resource scope.\n   * @param parameters Wrapper resource for tags patch API request only.\n   * @param options The options parameters.\n   */\n  async beginUpdateAtScope(scope, parameters, options) {\n    const directSendOperation = async (args, spec) => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (args, spec) => {\n      var _a;\n      let currentRawResponse = undefined;\n      const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;\n      const callback = (rawResponse, flatResponse) => {\n        currentRawResponse = rawResponse;\n        providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);\n      };\n      const updatedArgs = Object.assign(Object.assign({}, args), {\n        options: Object.assign(Object.assign({}, args.options), {\n          onResponse: callback\n        })\n      });\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse.status,\n          body: currentRawResponse.parsedBody,\n          headers: currentRawResponse.headers.toJSON()\n        }\n      };\n    };\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        scope,\n        parameters,\n        options\n      },\n      spec: updateAtScopeOperationSpec\n    });\n    const poller = await createHttpPoller(lro, {\n      restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,\n      intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n  /**\n   * This operation allows replacing, merging or selectively deleting tags on the specified resource or\n   * subscription. The specified entity can have a maximum of 50 tags at the end of the operation. The\n   * 'replace' option replaces the entire set of existing tags with a new set. The 'merge' option allows\n   * adding tags with new names and updating the values of tags with existing names. The 'delete' option\n   * allows selectively deleting tags based on given names or name/value pairs.\n   * @param scope The resource scope.\n   * @param parameters Wrapper resource for tags patch API request only.\n   * @param options The options parameters.\n   */\n  async beginUpdateAtScopeAndWait(scope, parameters, options) {\n    const poller = await this.beginUpdateAtScope(scope, parameters, options);\n    return poller.pollUntilDone();\n  }\n  /**\n   * Gets the entire set of tags on a resource or subscription.\n   * @param scope The resource scope.\n   * @param options The options parameters.\n   */\n  getAtScope(scope, options) {\n    return this.client.sendOperationRequest({\n      scope,\n      options\n    }, getAtScopeOperationSpec);\n  }\n  /**\n   * Deletes the entire set of tags on a resource or subscription.\n   * @param scope The resource scope.\n   * @param options The options parameters.\n   */\n  async beginDeleteAtScope(scope, options) {\n    const directSendOperation = async (args, spec) => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (args, spec) => {\n      var _a;\n      let currentRawResponse = undefined;\n      const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;\n      const callback = (rawResponse, flatResponse) => {\n        currentRawResponse = rawResponse;\n        providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);\n      };\n      const updatedArgs = Object.assign(Object.assign({}, args), {\n        options: Object.assign(Object.assign({}, args.options), {\n          onResponse: callback\n        })\n      });\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse.status,\n          body: currentRawResponse.parsedBody,\n          headers: currentRawResponse.headers.toJSON()\n        }\n      };\n    };\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        scope,\n        options\n      },\n      spec: deleteAtScopeOperationSpec\n    });\n    const poller = await createHttpPoller(lro, {\n      restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,\n      intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n  /**\n   * Deletes the entire set of tags on a resource or subscription.\n   * @param scope The resource scope.\n   * @param options The options parameters.\n   */\n  async beginDeleteAtScopeAndWait(scope, options) {\n    const poller = await this.beginDeleteAtScope(scope, options);\n    return poller.pollUntilDone();\n  }\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  _listNext(nextLink, options) {\n    return this.client.sendOperationRequest({\n      nextLink,\n      options\n    }, listNextOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */false);\nconst deleteValueOperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.tagName, Parameters.tagValue],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateValueOperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TagValue\n    },\n    201: {\n      bodyMapper: Mappers.TagValue\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.tagName, Parameters.tagValue],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateOperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/tagNames/{tagName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TagDetails\n    },\n    201: {\n      bodyMapper: Mappers.TagDetails\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.tagName],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst deleteOperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/tagNames/{tagName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.tagName],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listOperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/tagNames\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TagsListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateAtScopeOperationSpec = {\n  path: \"/{scope}/providers/Microsoft.Resources/tags/default\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TagsResource\n    },\n    201: {\n      bodyMapper: Mappers.TagsResource\n    },\n    202: {\n      bodyMapper: Mappers.TagsResource\n    },\n    204: {\n      bodyMapper: Mappers.TagsResource\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.parameters9,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.scope],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst updateAtScopeOperationSpec = {\n  path: \"/{scope}/providers/Microsoft.Resources/tags/default\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TagsResource\n    },\n    201: {\n      bodyMapper: Mappers.TagsResource\n    },\n    202: {\n      bodyMapper: Mappers.TagsResource\n    },\n    204: {\n      bodyMapper: Mappers.TagsResource\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.parameters10,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.scope],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getAtScopeOperationSpec = {\n  path: \"/{scope}/providers/Microsoft.Resources/tags/default\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TagsResource\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.scope],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst deleteAtScopeOperationSpec = {\n  path: \"/{scope}/providers/Microsoft.Resources/tags/default\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.scope],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listNextOperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TagsListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};","map":{"version":3,"names":["setContinuationToken","coreClient","Mappers","Parameters","createHttpPoller","createLroSpec","TagsOperationsImpl","constructor","client","list","options","iter","listPagingAll","next","Symbol","asyncIterator","byPage","settings","maxPageSize","Error","listPagingPage","result","continuationToken","__await","_list","page","value","nextLink","_listNext","_d","_e","__asyncValues","_f","_a","done","_c","__asyncDelegator","deleteValue","tagName","tagValue","sendOperationRequest","deleteValueOperationSpec","createOrUpdateValue","createOrUpdateValueOperationSpec","createOrUpdate","createOrUpdateOperationSpec","delete","deleteOperationSpec","listOperationSpec","beginCreateOrUpdateAtScope","scope","parameters","directSendOperation","args","spec","sendOperationFn","currentRawResponse","undefined","providedCallback","onResponse","callback","rawResponse","flatResponse","updatedArgs","Object","assign","statusCode","status","body","parsedBody","headers","toJSON","lro","createOrUpdateAtScopeOperationSpec","poller","restoreFrom","resumeFrom","intervalInMs","updateIntervalInMs","poll","beginCreateOrUpdateAtScopeAndWait","pollUntilDone","beginUpdateAtScope","updateAtScopeOperationSpec","beginUpdateAtScopeAndWait","getAtScope","getAtScopeOperationSpec","beginDeleteAtScope","deleteAtScopeOperationSpec","beginDeleteAtScopeAndWait","listNextOperationSpec","serializer","createSerializer","path","httpMethod","responses","default","bodyMapper","CloudError","queryParameters","apiVersion","urlParameters","$host","subscriptionId","headerParameters","accept","TagValue","TagDetails","TagsListResult","TagsResource","requestBody","parameters9","contentType","mediaType","parameters10"],"sources":["/home/runner/work/Azure-Service-Deployment-Web/Azure-Service-Deployment-Web/node_modules/@azure/arm-resources/src/operations/tagsOperations.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport { TagsOperations } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { ResourceManagementClient } from \"../resourceManagementClient.js\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller,\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl.js\";\nimport {\n  TagDetails,\n  TagsListNextOptionalParams,\n  TagsListOptionalParams,\n  TagsListResponse,\n  TagsDeleteValueOptionalParams,\n  TagsCreateOrUpdateValueOptionalParams,\n  TagsCreateOrUpdateValueResponse,\n  TagsCreateOrUpdateOptionalParams,\n  TagsCreateOrUpdateResponse,\n  TagsDeleteOptionalParams,\n  TagsResource,\n  TagsCreateOrUpdateAtScopeOptionalParams,\n  TagsCreateOrUpdateAtScopeResponse,\n  TagsPatchResource,\n  TagsUpdateAtScopeOptionalParams,\n  TagsUpdateAtScopeResponse,\n  TagsGetAtScopeOptionalParams,\n  TagsGetAtScopeResponse,\n  TagsDeleteAtScopeOptionalParams,\n  TagsListNextResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing TagsOperations operations. */\nexport class TagsOperationsImpl implements TagsOperations {\n  private readonly client: ResourceManagementClient;\n\n  /**\n   * Initialize a new instance of the class TagsOperations class.\n   * @param client Reference to the service client\n   */\n  constructor(client: ResourceManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * This operation performs a union of predefined tags, resource tags, resource group tags and\n   * subscription tags, and returns a summary of usage for each tag name and value under the given\n   * subscription. In case of a large number of tags, this operation may return a previously cached\n   * result.\n   * @param options The options parameters.\n   */\n  public list(\n    options?: TagsListOptionalParams,\n  ): PagedAsyncIterableIterator<TagDetails> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      },\n    };\n  }\n\n  private async *listPagingPage(\n    options?: TagsListOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<TagDetails[]> {\n    let result: TagsListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    options?: TagsListOptionalParams,\n  ): AsyncIterableIterator<TagDetails> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * This operation allows deleting a value from the list of predefined values for an existing predefined\n   * tag name. The value being deleted must not be in use as a tag value for the given tag name for any\n   * resource.\n   * @param tagName The name of the tag.\n   * @param tagValue The value of the tag to delete.\n   * @param options The options parameters.\n   */\n  deleteValue(\n    tagName: string,\n    tagValue: string,\n    options?: TagsDeleteValueOptionalParams,\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { tagName, tagValue, options },\n      deleteValueOperationSpec,\n    );\n  }\n\n  /**\n   * This operation allows adding a value to the list of predefined values for an existing predefined tag\n   * name. A tag value can have a maximum of 256 characters.\n   * @param tagName The name of the tag.\n   * @param tagValue The value of the tag to create.\n   * @param options The options parameters.\n   */\n  createOrUpdateValue(\n    tagName: string,\n    tagValue: string,\n    options?: TagsCreateOrUpdateValueOptionalParams,\n  ): Promise<TagsCreateOrUpdateValueResponse> {\n    return this.client.sendOperationRequest(\n      { tagName, tagValue, options },\n      createOrUpdateValueOperationSpec,\n    );\n  }\n\n  /**\n   * This operation allows adding a name to the list of predefined tag names for the given subscription.\n   * A tag name can have a maximum of 512 characters and is case-insensitive. Tag names cannot have the\n   * following prefixes which are reserved for Azure use: 'microsoft', 'azure', 'windows'.\n   * @param tagName The name of the tag to create.\n   * @param options The options parameters.\n   */\n  createOrUpdate(\n    tagName: string,\n    options?: TagsCreateOrUpdateOptionalParams,\n  ): Promise<TagsCreateOrUpdateResponse> {\n    return this.client.sendOperationRequest(\n      { tagName, options },\n      createOrUpdateOperationSpec,\n    );\n  }\n\n  /**\n   * This operation allows deleting a name from the list of predefined tag names for the given\n   * subscription. The name being deleted must not be in use as a tag name for any resource. All\n   * predefined values for the given name must have already been deleted.\n   * @param tagName The name of the tag.\n   * @param options The options parameters.\n   */\n  delete(tagName: string, options?: TagsDeleteOptionalParams): Promise<void> {\n    return this.client.sendOperationRequest(\n      { tagName, options },\n      deleteOperationSpec,\n    );\n  }\n\n  /**\n   * This operation performs a union of predefined tags, resource tags, resource group tags and\n   * subscription tags, and returns a summary of usage for each tag name and value under the given\n   * subscription. In case of a large number of tags, this operation may return a previously cached\n   * result.\n   * @param options The options parameters.\n   */\n  private _list(options?: TagsListOptionalParams): Promise<TagsListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * This operation allows adding or replacing the entire set of tags on the specified resource or\n   * subscription. The specified entity can have a maximum of 50 tags.\n   * @param scope The resource scope.\n   * @param parameters Wrapper resource for tags API requests and responses.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateAtScope(\n    scope: string,\n    parameters: TagsResource,\n    options?: TagsCreateOrUpdateAtScopeOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<TagsCreateOrUpdateAtScopeResponse>,\n      TagsCreateOrUpdateAtScopeResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<TagsCreateOrUpdateAtScopeResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { scope, parameters, options },\n      spec: createOrUpdateAtScopeOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      TagsCreateOrUpdateAtScopeResponse,\n      OperationState<TagsCreateOrUpdateAtScopeResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * This operation allows adding or replacing the entire set of tags on the specified resource or\n   * subscription. The specified entity can have a maximum of 50 tags.\n   * @param scope The resource scope.\n   * @param parameters Wrapper resource for tags API requests and responses.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateAtScopeAndWait(\n    scope: string,\n    parameters: TagsResource,\n    options?: TagsCreateOrUpdateAtScopeOptionalParams,\n  ): Promise<TagsCreateOrUpdateAtScopeResponse> {\n    const poller = await this.beginCreateOrUpdateAtScope(\n      scope,\n      parameters,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * This operation allows replacing, merging or selectively deleting tags on the specified resource or\n   * subscription. The specified entity can have a maximum of 50 tags at the end of the operation. The\n   * 'replace' option replaces the entire set of existing tags with a new set. The 'merge' option allows\n   * adding tags with new names and updating the values of tags with existing names. The 'delete' option\n   * allows selectively deleting tags based on given names or name/value pairs.\n   * @param scope The resource scope.\n   * @param parameters Wrapper resource for tags patch API request only.\n   * @param options The options parameters.\n   */\n  async beginUpdateAtScope(\n    scope: string,\n    parameters: TagsPatchResource,\n    options?: TagsUpdateAtScopeOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<TagsUpdateAtScopeResponse>,\n      TagsUpdateAtScopeResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<TagsUpdateAtScopeResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { scope, parameters, options },\n      spec: updateAtScopeOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      TagsUpdateAtScopeResponse,\n      OperationState<TagsUpdateAtScopeResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * This operation allows replacing, merging or selectively deleting tags on the specified resource or\n   * subscription. The specified entity can have a maximum of 50 tags at the end of the operation. The\n   * 'replace' option replaces the entire set of existing tags with a new set. The 'merge' option allows\n   * adding tags with new names and updating the values of tags with existing names. The 'delete' option\n   * allows selectively deleting tags based on given names or name/value pairs.\n   * @param scope The resource scope.\n   * @param parameters Wrapper resource for tags patch API request only.\n   * @param options The options parameters.\n   */\n  async beginUpdateAtScopeAndWait(\n    scope: string,\n    parameters: TagsPatchResource,\n    options?: TagsUpdateAtScopeOptionalParams,\n  ): Promise<TagsUpdateAtScopeResponse> {\n    const poller = await this.beginUpdateAtScope(scope, parameters, options);\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets the entire set of tags on a resource or subscription.\n   * @param scope The resource scope.\n   * @param options The options parameters.\n   */\n  getAtScope(\n    scope: string,\n    options?: TagsGetAtScopeOptionalParams,\n  ): Promise<TagsGetAtScopeResponse> {\n    return this.client.sendOperationRequest(\n      { scope, options },\n      getAtScopeOperationSpec,\n    );\n  }\n\n  /**\n   * Deletes the entire set of tags on a resource or subscription.\n   * @param scope The resource scope.\n   * @param options The options parameters.\n   */\n  async beginDeleteAtScope(\n    scope: string,\n    options?: TagsDeleteAtScopeOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { scope, options },\n      spec: deleteAtScopeOperationSpec,\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes the entire set of tags on a resource or subscription.\n   * @param scope The resource scope.\n   * @param options The options parameters.\n   */\n  async beginDeleteAtScopeAndWait(\n    scope: string,\n    options?: TagsDeleteAtScopeOptionalParams,\n  ): Promise<void> {\n    const poller = await this.beginDeleteAtScope(scope, options);\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    nextLink: string,\n    options?: TagsListNextOptionalParams,\n  ): Promise<TagsListNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listNextOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst deleteValueOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.tagName,\n    Parameters.tagValue,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst createOrUpdateValueOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TagValue,\n    },\n    201: {\n      bodyMapper: Mappers.TagValue,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.tagName,\n    Parameters.tagValue,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/tagNames/{tagName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TagDetails,\n    },\n    201: {\n      bodyMapper: Mappers.TagDetails,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.tagName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/tagNames/{tagName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.tagName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/tagNames\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TagsListResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst createOrUpdateAtScopeOperationSpec: coreClient.OperationSpec = {\n  path: \"/{scope}/providers/Microsoft.Resources/tags/default\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TagsResource,\n    },\n    201: {\n      bodyMapper: Mappers.TagsResource,\n    },\n    202: {\n      bodyMapper: Mappers.TagsResource,\n    },\n    204: {\n      bodyMapper: Mappers.TagsResource,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.parameters9,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.scope],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst updateAtScopeOperationSpec: coreClient.OperationSpec = {\n  path: \"/{scope}/providers/Microsoft.Resources/tags/default\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TagsResource,\n    },\n    201: {\n      bodyMapper: Mappers.TagsResource,\n    },\n    202: {\n      bodyMapper: Mappers.TagsResource,\n    },\n    204: {\n      bodyMapper: Mappers.TagsResource,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.parameters10,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.scope],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getAtScopeOperationSpec: coreClient.OperationSpec = {\n  path: \"/{scope}/providers/Microsoft.Resources/tags/default\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TagsResource,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.scope],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst deleteAtScopeOperationSpec: coreClient.OperationSpec = {\n  path: \"/{scope}/providers/Microsoft.Resources/tags/default\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.scope],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TagsListResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.nextLink,\n    Parameters.subscriptionId,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}