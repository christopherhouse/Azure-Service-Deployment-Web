{"ast":null,"code":"import _objectSpread from\"/home/runner/work/Azure-Service-Deployment-Web/Azure-Service-Deployment-Web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useMsal}from\"@azure/msal-react\";import{loginRequest}from\"../authConfig\";export class MsalTokenCredential{constructor(instance){this.instance=instance;}async getToken(scopes){try{var _response$expiresOn;const account=this.instance.getAllAccounts()[0];if(!account){throw new Error(\"No account found\");}const scopeArray=Array.isArray(scopes)?scopes:[scopes];const response=await this.instance.acquireTokenSilent(_objectSpread(_objectSpread({},loginRequest),{},{scopes:scopeArray,account:account}));return{token:response.accessToken,expiresOnTimestamp:((_response$expiresOn=response.expiresOn)===null||_response$expiresOn===void 0?void 0:_response$expiresOn.getTime())||0};}catch(error){console.error(\"Failed to acquire token:\",error);return null;}}}export const useAzureCredential=()=>{const{instance,accounts}=useMsal();if(accounts.length===0){return null;}return new MsalTokenCredential(instance);};","map":{"version":3,"names":["useMsal","loginRequest","MsalTokenCredential","constructor","instance","getToken","scopes","_response$expiresOn","account","getAllAccounts","Error","scopeArray","Array","isArray","response","acquireTokenSilent","_objectSpread","token","accessToken","expiresOnTimestamp","expiresOn","getTime","error","console","useAzureCredential","accounts","length"],"sources":["/home/runner/work/Azure-Service-Deployment-Web/Azure-Service-Deployment-Web/src/react/src/hooks/useAzureCredential.ts"],"sourcesContent":["import { useMsal } from \"@azure/msal-react\";\nimport { TokenCredential, AccessToken } from \"@azure/core-auth\";\nimport { loginRequest } from \"../authConfig\";\n\nexport class MsalTokenCredential implements TokenCredential {\n  constructor(private instance: any) {}\n\n  async getToken(scopes: string | string[]): Promise<AccessToken | null> {\n    try {\n      const account = this.instance.getAllAccounts()[0];\n      if (!account) {\n        throw new Error(\"No account found\");\n      }\n\n      const scopeArray = Array.isArray(scopes) ? scopes : [scopes];\n      const response = await this.instance.acquireTokenSilent({\n        ...loginRequest,\n        scopes: scopeArray,\n        account: account,\n      });\n\n      return {\n        token: response.accessToken,\n        expiresOnTimestamp: response.expiresOn?.getTime() || 0,\n      };\n    } catch (error) {\n      console.error(\"Failed to acquire token:\", error);\n      return null;\n    }\n  }\n}\n\nexport const useAzureCredential = (): TokenCredential | null => {\n  const { instance, accounts } = useMsal();\n\n  if (accounts.length === 0) {\n    return null;\n  }\n\n  return new MsalTokenCredential(instance);\n};"],"mappings":"gKAAA,OAASA,OAAO,KAAQ,mBAAmB,CAE3C,OAASC,YAAY,KAAQ,eAAe,CAE5C,MAAO,MAAM,CAAAC,mBAA+C,CAC1DC,WAAWA,CAASC,QAAa,CAAE,MAAfA,QAAa,CAAbA,QAAa,CAAG,CAEpC,KAAM,CAAAC,QAAQA,CAACC,MAAyB,CAA+B,CACrE,GAAI,KAAAC,mBAAA,CACF,KAAM,CAAAC,OAAO,CAAG,IAAI,CAACJ,QAAQ,CAACK,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CACjD,GAAI,CAACD,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAE,KAAK,CAAC,kBAAkB,CAAC,CACrC,CAEA,KAAM,CAAAC,UAAU,CAAGC,KAAK,CAACC,OAAO,CAACP,MAAM,CAAC,CAAGA,MAAM,CAAG,CAACA,MAAM,CAAC,CAC5D,KAAM,CAAAQ,QAAQ,CAAG,KAAM,KAAI,CAACV,QAAQ,CAACW,kBAAkB,CAAAC,aAAA,CAAAA,aAAA,IAClDf,YAAY,MACfK,MAAM,CAAEK,UAAU,CAClBH,OAAO,CAAEA,OAAO,EACjB,CAAC,CAEF,MAAO,CACLS,KAAK,CAAEH,QAAQ,CAACI,WAAW,CAC3BC,kBAAkB,CAAE,EAAAZ,mBAAA,CAAAO,QAAQ,CAACM,SAAS,UAAAb,mBAAA,iBAAlBA,mBAAA,CAAoBc,OAAO,CAAC,CAAC,GAAI,CACvD,CAAC,CACH,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAChD,MAAO,KAAI,CACb,CACF,CACF,CAEA,MAAO,MAAM,CAAAE,kBAAkB,CAAGA,CAAA,GAA8B,CAC9D,KAAM,CAAEpB,QAAQ,CAAEqB,QAAS,CAAC,CAAGzB,OAAO,CAAC,CAAC,CAExC,GAAIyB,QAAQ,CAACC,MAAM,GAAK,CAAC,CAAE,CACzB,MAAO,KAAI,CACb,CAEA,MAAO,IAAI,CAAAxB,mBAAmB,CAACE,QAAQ,CAAC,CAC1C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}