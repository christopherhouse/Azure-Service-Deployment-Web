{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { getHeaderName, setPlatformSpecificData } from \"./userAgentPlatform.js\";\nimport { SDK_VERSION } from \"../constants.js\";\nfunction getUserAgentString(telemetryInfo) {\n  const parts = [];\n  for (const [key, value] of telemetryInfo) {\n    const token = value ? \"\".concat(key, \"/\").concat(value) : key;\n    parts.push(token);\n  }\n  return parts.join(\" \");\n}\n/**\n * @internal\n */\nexport function getUserAgentHeaderName() {\n  return getHeaderName();\n}\n/**\n * @internal\n */\nexport async function getUserAgentValue(prefix) {\n  const runtimeInfo = new Map();\n  runtimeInfo.set(\"ts-http-runtime\", SDK_VERSION);\n  await setPlatformSpecificData(runtimeInfo);\n  const defaultAgent = getUserAgentString(runtimeInfo);\n  const userAgentValue = prefix ? \"\".concat(prefix, \" \").concat(defaultAgent) : defaultAgent;\n  return userAgentValue;\n}","map":{"version":3,"names":["getHeaderName","setPlatformSpecificData","SDK_VERSION","getUserAgentString","telemetryInfo","parts","key","value","token","concat","push","join","getUserAgentHeaderName","getUserAgentValue","prefix","runtimeInfo","Map","set","defaultAgent","userAgentValue"],"sources":["/home/runner/work/Azure-Service-Deployment-Web/Azure-Service-Deployment-Web/node_modules/@typespec/ts-http-runtime/src/util/userAgent.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { getHeaderName, setPlatformSpecificData } from \"./userAgentPlatform.js\";\nimport { SDK_VERSION } from \"../constants.js\";\n\nfunction getUserAgentString(telemetryInfo: Map<string, string>): string {\n  const parts: string[] = [];\n  for (const [key, value] of telemetryInfo) {\n    const token = value ? `${key}/${value}` : key;\n    parts.push(token);\n  }\n  return parts.join(\" \");\n}\n\n/**\n * @internal\n */\nexport function getUserAgentHeaderName(): string {\n  return getHeaderName();\n}\n\n/**\n * @internal\n */\nexport async function getUserAgentValue(prefix?: string): Promise<string> {\n  const runtimeInfo = new Map<string, string>();\n  runtimeInfo.set(\"ts-http-runtime\", SDK_VERSION);\n  await setPlatformSpecificData(runtimeInfo);\n  const defaultAgent = getUserAgentString(runtimeInfo);\n  const userAgentValue = prefix ? `${prefix} ${defaultAgent}` : defaultAgent;\n  return userAgentValue;\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,aAAa,EAAEC,uBAAuB,QAAQ,wBAAwB;AAC/E,SAASC,WAAW,QAAQ,iBAAiB;AAE7C,SAASC,kBAAkBA,CAACC,aAAkC;EAC5D,MAAMC,KAAK,GAAa,EAAE;EAC1B,KAAK,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,IAAIH,aAAa,EAAE;IACxC,MAAMI,KAAK,GAAGD,KAAK,MAAAE,MAAA,CAAMH,GAAG,OAAAG,MAAA,CAAIF,KAAK,IAAKD,GAAG;IAC7CD,KAAK,CAACK,IAAI,CAACF,KAAK,CAAC;EACnB;EACA,OAAOH,KAAK,CAACM,IAAI,CAAC,GAAG,CAAC;AACxB;AAEA;;;AAGA,OAAM,SAAUC,sBAAsBA,CAAA;EACpC,OAAOZ,aAAa,EAAE;AACxB;AAEA;;;AAGA,OAAO,eAAea,iBAAiBA,CAACC,MAAe;EACrD,MAAMC,WAAW,GAAG,IAAIC,GAAG,EAAkB;EAC7CD,WAAW,CAACE,GAAG,CAAC,iBAAiB,EAAEf,WAAW,CAAC;EAC/C,MAAMD,uBAAuB,CAACc,WAAW,CAAC;EAC1C,MAAMG,YAAY,GAAGf,kBAAkB,CAACY,WAAW,CAAC;EACpD,MAAMI,cAAc,GAAGL,MAAM,MAAAL,MAAA,CAAMK,MAAM,OAAAL,MAAA,CAAIS,YAAY,IAAKA,YAAY;EAC1E,OAAOC,cAAc;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}