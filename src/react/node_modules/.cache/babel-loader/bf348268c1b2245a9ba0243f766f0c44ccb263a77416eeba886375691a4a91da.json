{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from \"tslib\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { createHttpPoller } from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl.js\";\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing ResourceGroups operations. */\nexport class ResourceGroupsImpl {\n  /**\n   * Initialize a new instance of the class ResourceGroups class.\n   * @param client Reference to the service client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Gets all the resource groups for a subscription.\n   * @param options The options parameters.\n   */\n  list(options) {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: settings => {\n        if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      }\n    };\n  }\n  listPagingPage(options, settings) {\n    return __asyncGenerator(this, arguments, function* listPagingPage_1() {\n      let result;\n      let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;\n      if (!continuationToken) {\n        result = yield __await(this._list(options));\n        let page = result.value || [];\n        continuationToken = result.nextLink;\n        setContinuationToken(page, continuationToken);\n        yield yield __await(page);\n      }\n      while (continuationToken) {\n        result = yield __await(this._listNext(continuationToken, options));\n        continuationToken = result.nextLink;\n        let page = result.value || [];\n        setContinuationToken(page, continuationToken);\n        yield yield __await(page);\n      }\n    });\n  }\n  listPagingAll(options) {\n    return __asyncGenerator(this, arguments, function* listPagingAll_1() {\n      var _a, e_1, _b, _c;\n      try {\n        for (var _d = true, _e = __asyncValues(this.listPagingPage(options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {\n          _c = _f.value;\n          _d = false;\n          const page = _c;\n          yield __await(yield* __asyncDelegator(__asyncValues(page)));\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    });\n  }\n  /**\n   * Checks whether a resource group exists.\n   * @param resourceGroupName The name of the resource group to check. The name is case insensitive.\n   * @param options The options parameters.\n   */\n  checkExistence(resourceGroupName, options) {\n    return this.client.sendOperationRequest({\n      resourceGroupName,\n      options\n    }, checkExistenceOperationSpec);\n  }\n  /**\n   * Creates or updates a resource group.\n   * @param resourceGroupName The name of the resource group to create or update. Can include\n   *                          alphanumeric, underscore, parentheses, hyphen, period (except at end), and Unicode characters that\n   *                          match the allowed characters.\n   * @param parameters Parameters supplied to the create or update a resource group.\n   * @param options The options parameters.\n   */\n  createOrUpdate(resourceGroupName, parameters, options) {\n    return this.client.sendOperationRequest({\n      resourceGroupName,\n      parameters,\n      options\n    }, createOrUpdateOperationSpec);\n  }\n  /**\n   * When you delete a resource group, all of its resources are also deleted. Deleting a resource group\n   * deletes all of its template deployments and currently stored operations.\n   * @param resourceGroupName The name of the resource group to delete. The name is case insensitive.\n   * @param options The options parameters.\n   */\n  async beginDelete(resourceGroupName, options) {\n    const directSendOperation = async (args, spec) => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (args, spec) => {\n      var _a;\n      let currentRawResponse = undefined;\n      const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;\n      const callback = (rawResponse, flatResponse) => {\n        currentRawResponse = rawResponse;\n        providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);\n      };\n      const updatedArgs = Object.assign(Object.assign({}, args), {\n        options: Object.assign(Object.assign({}, args.options), {\n          onResponse: callback\n        })\n      });\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse.status,\n          body: currentRawResponse.parsedBody,\n          headers: currentRawResponse.headers.toJSON()\n        }\n      };\n    };\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        options\n      },\n      spec: deleteOperationSpec\n    });\n    const poller = await createHttpPoller(lro, {\n      restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,\n      intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n  /**\n   * When you delete a resource group, all of its resources are also deleted. Deleting a resource group\n   * deletes all of its template deployments and currently stored operations.\n   * @param resourceGroupName The name of the resource group to delete. The name is case insensitive.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(resourceGroupName, options) {\n    const poller = await this.beginDelete(resourceGroupName, options);\n    return poller.pollUntilDone();\n  }\n  /**\n   * Gets a resource group.\n   * @param resourceGroupName The name of the resource group to get. The name is case insensitive.\n   * @param options The options parameters.\n   */\n  get(resourceGroupName, options) {\n    return this.client.sendOperationRequest({\n      resourceGroupName,\n      options\n    }, getOperationSpec);\n  }\n  /**\n   * Resource groups can be updated through a simple PATCH operation to a group address. The format of\n   * the request is the same as that for creating a resource group. If a field is unspecified, the\n   * current value is retained.\n   * @param resourceGroupName The name of the resource group to update. The name is case insensitive.\n   * @param parameters Parameters supplied to update a resource group.\n   * @param options The options parameters.\n   */\n  update(resourceGroupName, parameters, options) {\n    return this.client.sendOperationRequest({\n      resourceGroupName,\n      parameters,\n      options\n    }, updateOperationSpec);\n  }\n  /**\n   * Captures the specified resource group as a template.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param parameters Parameters for exporting the template.\n   * @param options The options parameters.\n   */\n  async beginExportTemplate(resourceGroupName, parameters, options) {\n    const directSendOperation = async (args, spec) => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (args, spec) => {\n      var _a;\n      let currentRawResponse = undefined;\n      const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;\n      const callback = (rawResponse, flatResponse) => {\n        currentRawResponse = rawResponse;\n        providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);\n      };\n      const updatedArgs = Object.assign(Object.assign({}, args), {\n        options: Object.assign(Object.assign({}, args.options), {\n          onResponse: callback\n        })\n      });\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse.status,\n          body: currentRawResponse.parsedBody,\n          headers: currentRawResponse.headers.toJSON()\n        }\n      };\n    };\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        parameters,\n        options\n      },\n      spec: exportTemplateOperationSpec\n    });\n    const poller = await createHttpPoller(lro, {\n      restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,\n      intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,\n      resourceLocationConfig: \"location\"\n    });\n    await poller.poll();\n    return poller;\n  }\n  /**\n   * Captures the specified resource group as a template.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param parameters Parameters for exporting the template.\n   * @param options The options parameters.\n   */\n  async beginExportTemplateAndWait(resourceGroupName, parameters, options) {\n    const poller = await this.beginExportTemplate(resourceGroupName, parameters, options);\n    return poller.pollUntilDone();\n  }\n  /**\n   * Gets all the resource groups for a subscription.\n   * @param options The options parameters.\n   */\n  _list(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, listOperationSpec);\n  }\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  _listNext(nextLink, options) {\n    return this.client.sendOperationRequest({\n      nextLink,\n      options\n    }, listNextOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */false);\nconst checkExistenceOperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}\",\n  httpMethod: \"HEAD\",\n  responses: {\n    204: {},\n    404: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.resourceGroupName],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateOperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ResourceGroup\n    },\n    201: {\n      bodyMapper: Mappers.ResourceGroup\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.parameters6,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.resourceGroupName],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.forceDeletionTypes],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.resourceGroupName],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ResourceGroup\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.resourceGroupName],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateOperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ResourceGroup\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.parameters7,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.resourceGroupName],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst exportTemplateOperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/exportTemplate\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ResourceGroupExportResult\n    },\n    201: {\n      bodyMapper: Mappers.ResourceGroupExportResult\n    },\n    202: {\n      bodyMapper: Mappers.ResourceGroupExportResult\n    },\n    204: {\n      bodyMapper: Mappers.ResourceGroupExportResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.parameters8,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.resourceGroupName1],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst listOperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourcegroups\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ResourceGroupListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listNextOperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ResourceGroupListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};","map":{"version":3,"names":["setContinuationToken","coreClient","Mappers","Parameters","createHttpPoller","createLroSpec","ResourceGroupsImpl","constructor","client","list","options","iter","listPagingAll","next","Symbol","asyncIterator","byPage","settings","maxPageSize","Error","listPagingPage","result","continuationToken","__await","_list","page","value","nextLink","_listNext","_d","_e","__asyncValues","_f","_a","done","_c","__asyncDelegator","checkExistence","resourceGroupName","sendOperationRequest","checkExistenceOperationSpec","createOrUpdate","parameters","createOrUpdateOperationSpec","beginDelete","directSendOperation","args","spec","sendOperationFn","currentRawResponse","undefined","providedCallback","onResponse","callback","rawResponse","flatResponse","updatedArgs","Object","assign","statusCode","status","body","parsedBody","headers","toJSON","lro","deleteOperationSpec","poller","restoreFrom","resumeFrom","intervalInMs","updateIntervalInMs","poll","beginDeleteAndWait","pollUntilDone","get","getOperationSpec","update","updateOperationSpec","beginExportTemplate","exportTemplateOperationSpec","resourceLocationConfig","beginExportTemplateAndWait","listOperationSpec","listNextOperationSpec","serializer","createSerializer","path","httpMethod","responses","default","bodyMapper","CloudError","queryParameters","apiVersion","urlParameters","$host","subscriptionId","headerParameters","accept","ResourceGroup","requestBody","parameters6","contentType","mediaType","forceDeletionTypes","parameters7","ResourceGroupExportResult","parameters8","resourceGroupName1","ResourceGroupListResult","filter","top"],"sources":["/home/runner/work/Azure-Service-Deployment-Web/Azure-Service-Deployment-Web/node_modules/@azure/arm-resources/src/operations/resourceGroups.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport { ResourceGroups } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { ResourceManagementClient } from \"../resourceManagementClient.js\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller,\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl.js\";\nimport {\n  ResourceGroup,\n  ResourceGroupsListNextOptionalParams,\n  ResourceGroupsListOptionalParams,\n  ResourceGroupsListResponse,\n  ResourceGroupsCheckExistenceOptionalParams,\n  ResourceGroupsCheckExistenceResponse,\n  ResourceGroupsCreateOrUpdateOptionalParams,\n  ResourceGroupsCreateOrUpdateResponse,\n  ResourceGroupsDeleteOptionalParams,\n  ResourceGroupsGetOptionalParams,\n  ResourceGroupsGetResponse,\n  ResourceGroupPatchable,\n  ResourceGroupsUpdateOptionalParams,\n  ResourceGroupsUpdateResponse,\n  ExportTemplateRequest,\n  ResourceGroupsExportTemplateOptionalParams,\n  ResourceGroupsExportTemplateResponse,\n  ResourceGroupsListNextResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing ResourceGroups operations. */\nexport class ResourceGroupsImpl implements ResourceGroups {\n  private readonly client: ResourceManagementClient;\n\n  /**\n   * Initialize a new instance of the class ResourceGroups class.\n   * @param client Reference to the service client\n   */\n  constructor(client: ResourceManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Gets all the resource groups for a subscription.\n   * @param options The options parameters.\n   */\n  public list(\n    options?: ResourceGroupsListOptionalParams,\n  ): PagedAsyncIterableIterator<ResourceGroup> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      },\n    };\n  }\n\n  private async *listPagingPage(\n    options?: ResourceGroupsListOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<ResourceGroup[]> {\n    let result: ResourceGroupsListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    options?: ResourceGroupsListOptionalParams,\n  ): AsyncIterableIterator<ResourceGroup> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Checks whether a resource group exists.\n   * @param resourceGroupName The name of the resource group to check. The name is case insensitive.\n   * @param options The options parameters.\n   */\n  checkExistence(\n    resourceGroupName: string,\n    options?: ResourceGroupsCheckExistenceOptionalParams,\n  ): Promise<ResourceGroupsCheckExistenceResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, options },\n      checkExistenceOperationSpec,\n    );\n  }\n\n  /**\n   * Creates or updates a resource group.\n   * @param resourceGroupName The name of the resource group to create or update. Can include\n   *                          alphanumeric, underscore, parentheses, hyphen, period (except at end), and Unicode characters that\n   *                          match the allowed characters.\n   * @param parameters Parameters supplied to the create or update a resource group.\n   * @param options The options parameters.\n   */\n  createOrUpdate(\n    resourceGroupName: string,\n    parameters: ResourceGroup,\n    options?: ResourceGroupsCreateOrUpdateOptionalParams,\n  ): Promise<ResourceGroupsCreateOrUpdateResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, parameters, options },\n      createOrUpdateOperationSpec,\n    );\n  }\n\n  /**\n   * When you delete a resource group, all of its resources are also deleted. Deleting a resource group\n   * deletes all of its template deployments and currently stored operations.\n   * @param resourceGroupName The name of the resource group to delete. The name is case insensitive.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    options?: ResourceGroupsDeleteOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, options },\n      spec: deleteOperationSpec,\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * When you delete a resource group, all of its resources are also deleted. Deleting a resource group\n   * deletes all of its template deployments and currently stored operations.\n   * @param resourceGroupName The name of the resource group to delete. The name is case insensitive.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    options?: ResourceGroupsDeleteOptionalParams,\n  ): Promise<void> {\n    const poller = await this.beginDelete(resourceGroupName, options);\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets a resource group.\n   * @param resourceGroupName The name of the resource group to get. The name is case insensitive.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    options?: ResourceGroupsGetOptionalParams,\n  ): Promise<ResourceGroupsGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, options },\n      getOperationSpec,\n    );\n  }\n\n  /**\n   * Resource groups can be updated through a simple PATCH operation to a group address. The format of\n   * the request is the same as that for creating a resource group. If a field is unspecified, the\n   * current value is retained.\n   * @param resourceGroupName The name of the resource group to update. The name is case insensitive.\n   * @param parameters Parameters supplied to update a resource group.\n   * @param options The options parameters.\n   */\n  update(\n    resourceGroupName: string,\n    parameters: ResourceGroupPatchable,\n    options?: ResourceGroupsUpdateOptionalParams,\n  ): Promise<ResourceGroupsUpdateResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, parameters, options },\n      updateOperationSpec,\n    );\n  }\n\n  /**\n   * Captures the specified resource group as a template.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param parameters Parameters for exporting the template.\n   * @param options The options parameters.\n   */\n  async beginExportTemplate(\n    resourceGroupName: string,\n    parameters: ExportTemplateRequest,\n    options?: ResourceGroupsExportTemplateOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ResourceGroupsExportTemplateResponse>,\n      ResourceGroupsExportTemplateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<ResourceGroupsExportTemplateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, parameters, options },\n      spec: exportTemplateOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      ResourceGroupsExportTemplateResponse,\n      OperationState<ResourceGroupsExportTemplateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Captures the specified resource group as a template.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param parameters Parameters for exporting the template.\n   * @param options The options parameters.\n   */\n  async beginExportTemplateAndWait(\n    resourceGroupName: string,\n    parameters: ExportTemplateRequest,\n    options?: ResourceGroupsExportTemplateOptionalParams,\n  ): Promise<ResourceGroupsExportTemplateResponse> {\n    const poller = await this.beginExportTemplate(\n      resourceGroupName,\n      parameters,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets all the resource groups for a subscription.\n   * @param options The options parameters.\n   */\n  private _list(\n    options?: ResourceGroupsListOptionalParams,\n  ): Promise<ResourceGroupsListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    nextLink: string,\n    options?: ResourceGroupsListNextOptionalParams,\n  ): Promise<ResourceGroupsListNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listNextOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst checkExistenceOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}\",\n  httpMethod: \"HEAD\",\n  responses: {\n    204: {},\n    404: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ResourceGroup,\n    },\n    201: {\n      bodyMapper: Mappers.ResourceGroup,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.parameters6,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.forceDeletionTypes],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ResourceGroup,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ResourceGroup,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.parameters7,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst exportTemplateOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/exportTemplate\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ResourceGroupExportResult,\n    },\n    201: {\n      bodyMapper: Mappers.ResourceGroupExportResult,\n    },\n    202: {\n      bodyMapper: Mappers.ResourceGroupExportResult,\n    },\n    204: {\n      bodyMapper: Mappers.ResourceGroupExportResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.parameters8,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName1,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourcegroups\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ResourceGroupListResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ResourceGroupListResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.nextLink,\n    Parameters.subscriptionId,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}