{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createDefaultPipeline } from \"./clientHelpers.js\";\nimport { sendRequest } from \"./sendRequest.js\";\nimport { buildRequestUrl } from \"./urlHelpers.js\";\nimport { isNodeLike } from \"../util/checkEnvironment.js\";\n/**\n * Creates a client with a default pipeline\n * @param endpoint - Base endpoint for the client\n * @param credentials - Credentials to authenticate the requests\n * @param options - Client options\n */\nexport function getClient(endpoint) {\n  let clientOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _a, _b, _c;\n  const pipeline = (_a = clientOptions.pipeline) !== null && _a !== void 0 ? _a : createDefaultPipeline(clientOptions);\n  if ((_b = clientOptions.additionalPolicies) === null || _b === void 0 ? void 0 : _b.length) {\n    for (const {\n      policy,\n      position\n    } of clientOptions.additionalPolicies) {\n      // Sign happens after Retry and is commonly needed to occur\n      // before policies that intercept post-retry.\n      const afterPhase = position === \"perRetry\" ? \"Sign\" : undefined;\n      pipeline.addPolicy(policy, {\n        afterPhase\n      });\n    }\n  }\n  const {\n    allowInsecureConnection,\n    httpClient\n  } = clientOptions;\n  const endpointUrl = (_c = clientOptions.endpoint) !== null && _c !== void 0 ? _c : endpoint;\n  const client = function (path) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    const getUrl = requestOptions => buildRequestUrl(endpointUrl, path, args, Object.assign({\n      allowInsecureConnection\n    }, requestOptions));\n    return {\n      get: function () {\n        let requestOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return buildOperation(\"GET\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      post: function () {\n        let requestOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return buildOperation(\"POST\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      put: function () {\n        let requestOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return buildOperation(\"PUT\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      patch: function () {\n        let requestOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return buildOperation(\"PATCH\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      delete: function () {\n        let requestOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return buildOperation(\"DELETE\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      head: function () {\n        let requestOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return buildOperation(\"HEAD\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      options: function () {\n        let requestOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return buildOperation(\"OPTIONS\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      trace: function () {\n        let requestOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return buildOperation(\"TRACE\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      }\n    };\n  };\n  return {\n    path: client,\n    pathUnchecked: client,\n    pipeline\n  };\n}\nfunction buildOperation(method, url, pipeline, options, allowInsecureConnection, httpClient) {\n  var _a;\n  allowInsecureConnection = (_a = options.allowInsecureConnection) !== null && _a !== void 0 ? _a : allowInsecureConnection;\n  return {\n    then: function (onFulfilled, onrejected) {\n      return sendRequest(method, url, pipeline, Object.assign(Object.assign({}, options), {\n        allowInsecureConnection\n      }), httpClient).then(onFulfilled, onrejected);\n    },\n    async asBrowserStream() {\n      if (isNodeLike) {\n        throw new Error(\"`asBrowserStream` is supported only in the browser environment. Use `asNodeStream` instead to obtain the response body stream. If you require a Web stream of the response in Node, consider using `Readable.toWeb` on the result of `asNodeStream`.\");\n      } else {\n        return sendRequest(method, url, pipeline, Object.assign(Object.assign({}, options), {\n          allowInsecureConnection,\n          responseAsStream: true\n        }), httpClient);\n      }\n    },\n    async asNodeStream() {\n      if (isNodeLike) {\n        return sendRequest(method, url, pipeline, Object.assign(Object.assign({}, options), {\n          allowInsecureConnection,\n          responseAsStream: true\n        }), httpClient);\n      } else {\n        throw new Error(\"`isNodeStream` is not supported in the browser environment. Use `asBrowserStream` to obtain the response body stream.\");\n      }\n    }\n  };\n}","map":{"version":3,"names":["createDefaultPipeline","sendRequest","buildRequestUrl","isNodeLike","getClient","endpoint","clientOptions","arguments","length","undefined","pipeline","_a","_b","additionalPolicies","policy","position","afterPhase","addPolicy","allowInsecureConnection","httpClient","endpointUrl","_c","client","path","_len","args","Array","_key","getUrl","requestOptions","Object","assign","get","buildOperation","post","put","patch","delete","head","options","trace","pathUnchecked","method","url","then","onFulfilled","onrejected","asBrowserStream","Error","responseAsStream","asNodeStream"],"sources":["/home/runner/work/Azure-Service-Deployment-Web/Azure-Service-Deployment-Web/node_modules/@typespec/ts-http-runtime/src/client/getClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { HttpClient, HttpMethods } from \"../interfaces.js\";\nimport type { Pipeline } from \"../pipeline.js\";\nimport { createDefaultPipeline } from \"./clientHelpers.js\";\nimport type {\n  Client,\n  ClientOptions,\n  HttpBrowserStreamResponse,\n  HttpNodeStreamResponse,\n  RequestParameters,\n  ResourceMethods,\n  StreamableMethod,\n} from \"./common.js\";\nimport { sendRequest } from \"./sendRequest.js\";\nimport { buildRequestUrl } from \"./urlHelpers.js\";\nimport { isNodeLike } from \"../util/checkEnvironment.js\";\n\n/**\n * Creates a client with a default pipeline\n * @param endpoint - Base endpoint for the client\n * @param credentials - Credentials to authenticate the requests\n * @param options - Client options\n */\nexport function getClient(endpoint: string, clientOptions: ClientOptions = {}): Client {\n  const pipeline = clientOptions.pipeline ?? createDefaultPipeline(clientOptions);\n  if (clientOptions.additionalPolicies?.length) {\n    for (const { policy, position } of clientOptions.additionalPolicies) {\n      // Sign happens after Retry and is commonly needed to occur\n      // before policies that intercept post-retry.\n      const afterPhase = position === \"perRetry\" ? \"Sign\" : undefined;\n      pipeline.addPolicy(policy, {\n        afterPhase,\n      });\n    }\n  }\n\n  const { allowInsecureConnection, httpClient } = clientOptions;\n  const endpointUrl = clientOptions.endpoint ?? endpoint;\n  const client = (path: string, ...args: Array<any>): ResourceMethods<StreamableMethod> => {\n    const getUrl = (requestOptions: RequestParameters): string =>\n      buildRequestUrl(endpointUrl, path, args, { allowInsecureConnection, ...requestOptions });\n\n    return {\n      get: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"GET\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient,\n        );\n      },\n      post: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"POST\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient,\n        );\n      },\n      put: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"PUT\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient,\n        );\n      },\n      patch: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"PATCH\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient,\n        );\n      },\n      delete: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"DELETE\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient,\n        );\n      },\n      head: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"HEAD\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient,\n        );\n      },\n      options: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"OPTIONS\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient,\n        );\n      },\n      trace: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"TRACE\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient,\n        );\n      },\n    };\n  };\n\n  return {\n    path: client,\n    pathUnchecked: client,\n    pipeline,\n  };\n}\n\nfunction buildOperation(\n  method: HttpMethods,\n  url: string,\n  pipeline: Pipeline,\n  options: RequestParameters,\n  allowInsecureConnection?: boolean,\n  httpClient?: HttpClient,\n): StreamableMethod {\n  allowInsecureConnection = options.allowInsecureConnection ?? allowInsecureConnection;\n  return {\n    then: function (onFulfilled, onrejected) {\n      return sendRequest(\n        method,\n        url,\n        pipeline,\n        { ...options, allowInsecureConnection },\n        httpClient,\n      ).then(onFulfilled, onrejected);\n    },\n    async asBrowserStream() {\n      if (isNodeLike) {\n        throw new Error(\n          \"`asBrowserStream` is supported only in the browser environment. Use `asNodeStream` instead to obtain the response body stream. If you require a Web stream of the response in Node, consider using `Readable.toWeb` on the result of `asNodeStream`.\",\n        );\n      } else {\n        return sendRequest(\n          method,\n          url,\n          pipeline,\n          { ...options, allowInsecureConnection, responseAsStream: true },\n          httpClient,\n        ) as Promise<HttpBrowserStreamResponse>;\n      }\n    },\n    async asNodeStream() {\n      if (isNodeLike) {\n        return sendRequest(\n          method,\n          url,\n          pipeline,\n          { ...options, allowInsecureConnection, responseAsStream: true },\n          httpClient,\n        ) as Promise<HttpNodeStreamResponse>;\n      } else {\n        throw new Error(\n          \"`isNodeStream` is not supported in the browser environment. Use `asBrowserStream` to obtain the response body stream.\",\n        );\n      }\n    },\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}